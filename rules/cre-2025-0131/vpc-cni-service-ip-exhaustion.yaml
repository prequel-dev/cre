rules:
  - metadata:
      kind: prequel
      id: Vjnta2ePERB2QESp5HqJft
      version: "0.1.0"
    cre:
      id: CRE-2025-0131
      severity: 0
      title: Silent Service Disruption During VPC CNI IP Address Exhaustion
      category: kubernetes-network-integrity
      author: Prequel
      description: |
        - When AWS VPC CNI exhausts available IP addresses in configured subnets, Kubernetes clusters experience cascading failures that can render services completely unavailable.
        - Pods fail to schedule with "insufficient IP addresses" errors, but the scheduler continues retry attempts without clear indication of the underlying networking constraint.
        - New deployments and scaling operations silently fail, leaving applications in degraded states without obvious root cause visibility.
        - This creates a critical service availability issue that can affect production workloads, user-facing applications, and dependent services.
      cause: |
        - VPC subnets configured for the cluster have insufficient IP address capacity for current and scaling demands.
        - AWS VPC CNI cannot allocate ENIs (Elastic Network Interfaces) due to subnet IP exhaustion.
        - The network plugin becomes unready, causing node taints that prevent pod scheduling.
        - Kubernetes scheduler repeatedly attempts to place pods but fails due to network constraints.
        - Container runtime (containerd/docker) cannot create pod sandboxes without functional networking.
      impact: |
        - Complete service unavailability for new deployments and scaling operations.
        - Existing services may become unreachable due to networking failures.
        - Deployment rollouts get stuck in pending state with 0/N replicas ready.
        - Load balancer health checks fail, removing healthy instances from service.
        - Cluster autoscaler cannot add nodes due to networking constraints.
        - Silent degradation of service reliability without clear alerting.
      impactScore: 10
      tags:
         - ip-address-exhaustion
         - aws-cni-networking
         - service-unavailable
         - network-unavailable
      mitigation: |
        - Monitor subnet IP utilization and set up alerts before exhaustion (recommend <80% threshold).
        - Use larger subnet CIDR blocks or additional subnets for cluster networking.
        - Implement pod networking with IP address management (IPAM) monitoring.
        - Configure cluster autoscaler with network capacity awareness.
        - Set up alerts on ENI allocation failures and VPC CNI errors.
        - Monitor kube-scheduler metrics for persistent scheduling failures.
        - Use secondary CIDR blocks for additional IP address space.
        - Implement network policies to optimize IP usage efficiency.
      mitigationScore: 9
      references:
         - https://docs.aws.amazon.com/eks/latest/userguide/cni-increase-ip-addresses.html
         - https://github.com/aws/amazon-vpc-cni-k8s/blob/master/docs/troubleshooting.md
         - https://aws.amazon.com/blogs/containers/optimize-ip-addresses-usage-by-pods-in-your-amazon-eks-cluster/
         - https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/
         - https://docs.aws.amazon.com/vpc/latest/userguide/vpc-ip-addressing.html
      reports: 1
      version: "0.1.0"
      applications:
        - name: "kubernetes"
          version: "1.28+"
        - name: "aws-vpc-cni"
          version: "1.12+"
    rule:
      sequence:
        window: 60s
        event:
             source: cre.log.kubernetes
        order:
          - regex: "ERROR"
            count: 2
        negate:
          - "test"
          - "graceful shutdown"
