rules:
  - metadata:
      kind: prequel
      id: 8KdL9mNpQ2rVxYzE3FwGhJ
    cre:
      id: CRE-2025-0079
      severity: 0
      title: "SpiceDB Database Corruption: Critical Table Loss"
      category: "authorization-systems"
      author: Community
      description: |
        Detects catastrophic SpiceDB database corruption where critical core tables 
        like `alembic_version` and `relation_tuple_transaction` are missing or dropped.
        This represents complete database corruption that renders SpiceDB unable to 
        perform any authorization operations, causing total permission system failure.
      cause: |
        - Database corruption from storage failures or disk issues
        - Accidental or malicious table drops during maintenance
        - Failed database restore operations leaving incomplete schema
        - Kubernetes storage volume corruption during pod restarts
        - Manual database modifications that remove core SpiceDB tables
        - Incomplete backup restoration missing critical tables
        - Database migration rollback failures
      impact: |
        - Complete SpiceDB authorization system failure
        - All permission checks return errors, blocking user access
        - Applications dependent on SpiceDB become unusable
        - Critical security boundary failures in production
        - Service outages for fine-grained access control systems
        - Potential unauthorized access if applications have insecure fallbacks
        - Loss of audit trail and permission history
      tags:
        - spicedb
        - database-corruption
        - authorization-failure
        - table-missing
        - postgres
        - critical-failure
      mitigation: |
        IMMEDIATE ACTIONS:
        - Stop all SpiceDB services immediately to prevent further damage
        - Isolate the corrupted database to prevent data loss
        - Check PostgreSQL logs for corruption indicators or storage errors
        
        ASSESSMENT:
        - Run: `psql -U spicedb -d spicedb -c "\dt"` to list existing tables
        - Verify critical tables exist: `alembic_version`, `relation_tuple_transaction`, `metadata`
        - Check for recent backup availability and integrity
        
        RECOVERY:
        - Restore database from most recent known-good backup
        - If no backup available, reinitialize database with migrations:
          `spicedb migrate head --datastore-conn-uri=<uri>`
        - Verify data integrity after restoration
        - Test permission operations before returning to production
        
        PREVENTION:
        - Implement automated database backups with integrity verification
        - Monitor database table existence in health checks
        - Use database-level permissions to prevent accidental table drops
        - Implement storage monitoring for early corruption detection
      references:
        - https://authzed.com/docs/spicedb/getting-started/migrating
        - https://github.com/authzed/spicedb/issues
        - https://authzed.com/docs/spicedb/concepts/datastore
        - https://www.postgresql.org/docs/current/backup-dump.html
      applications:
        - name: spicedb
          version: ">=1.44.0"
        - name: postgresql
          version: ">=12.0"
      impactScore: 10
      mitigationScore: 3
      reports: 1
    rule:
      set:
        window: 3m
        event:
          source: cre.log.postgresql
        match:
          - regex: 'ERROR:\s+relation\s+"(alembic_version|relation_tuple_transaction)"\s+does\s+not\s+exist'
            count: 3
          - regex: 'relation\s+".*tuple.*transaction.*"\s+does\s+not\s+exist\s+at\s+character\s+\d+'
          - regex: '\[\d+\]\s+ERROR:\s+relation\s+"alembic_version"\s+does\s+not\s+exist\s+at\s+character\s+\d+'
        negate:
          - "migration"
          - "DROP TABLE"