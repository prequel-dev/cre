rules:
  - metadata:
      kind: prequel
      id: SB11SSLCertM1ss1ngErr1r
      gen: 1
    cre:
      id: CRE-2025-0142
      severity: 2
      title: "Supabase Self-Hosted: SSL Certificate Missing or Invalid Configuration"
      category: "configuration-problem"
      author: Prequel
      description: |
        Detects when Supabase services fail due to missing, invalid, or improperly configured SSL certificates.
        This affects HTTPS endpoints, secure WebSocket connections, and can prevent clients from establishing
        secure connections to the self-hosted Supabase instance.
      cause: |
        - SSL certificate files missing from expected paths
        - Invalid or corrupted certificate content
        - Certificate file permission errors (not readable by service)
        - Expired SSL certificates
        - Certificate and private key mismatch
        - Wrong certificate format or encoding
        - SSL configuration enabled but certificates not provided
      tags:
        - supabase
        - ssl
        - tls
        - certificate-verification
        - security
        - configuration
        - proxy
        - self-hosted
        - ssl-certificate
        - public
      mitigation: |
        IMMEDIATE:
          - Check certificate file existence: `ls -la /path/to/ssl/certs/`
          - Verify certificate permissions: `chmod 644 server.crt && chmod 600 server.key`
          - Test certificate validity: `openssl x509 -in server.crt -text -noout`
        CONFIGURATION:
          - Generate self-signed certificate for testing:
            ```bash
            openssl req -x509 -newkey rsa:2048 -nodes \
              -keyout server.key -out server.crt -days 365 \
              -subj "/CN=localhost"
            ```
          - Use Let's Encrypt for production certificates
          - Update Kong SSL configuration with correct certificate paths
          - Ensure certificate includes necessary Subject Alternative Names (SANs)
        VALIDATION:
          - Test HTTPS endpoint: `curl -k https://localhost:8443/`
          - Verify certificate chain: `openssl verify -verbose server.crt`
          - Check certificate expiration: `openssl x509 -in server.crt -noout -dates`
        PREVENTION:
          - Implement certificate expiration monitoring
          - Use automated certificate renewal (certbot)
          - Store certificates securely with proper access controls
          - Document SSL configuration requirements
      references:
        - https://docs.konghq.com/latest/configure/auth/tls/
        - https://letsencrypt.org/getting-started/
        - https://www.openssl.org/docs/man1.1.1/man1/openssl-x509.html
      applications:
        - name: kong
          containerName: supabase-kong
          version: "2.*"
      impact: |
        - HTTPS endpoints fail to start or accept connections
        - Secure WebSocket connections cannot be established
        - Browsers display security warnings for invalid certificates
        - API clients fail SSL verification
        - Complete loss of secure connectivity
      impactScore: 6
      mitigationScore: 5
      reports: 10
    rule:
      set:
        window: 5m
        event:
          source: cre.log.kong
        match:
          - regex: 'SSL.*certificate.*not found|certificate.*file.*missing|SSL.*configuration.*error'
          - regex: 'invalid.*certificate|certificate.*verification.*failed|SSL.*handshake.*failed'
          - regex: 'permission denied.*certificate|certificate.*expired|SSL.*cert.*invalid'
          - value: "ssl"

