rules:
  - cre:
      id: CRE-2025-0070
      severity: 0
      title: Kafka Under-Replicated Partitions Crisis
      category: message-queue-problem
      author: Prequel
      description: |
        Critical Kafka cluster degradation detected: Multiple partitions have lost replicas due to broker failure,
        resulting in an under-replicated state. This pattern indicates a broker has become unavailable, causing
        partition leadership changes and In-Sync Replica (ISR) shrinkage across multiple topics.
      cause: |
        - Broker process crash or unplanned shutdown
        - Host-level failure (hardware, OS, or container failure)
        - Network partition isolating broker from cluster
        - Resource exhaustion (disk full, memory pressure, CPU saturation)
        - JVM issues (OutOfMemoryError, garbage collection storms)
        - Infrastructure issues (storage failures, network connectivity)
      impact: |
        - CRITICAL: Immediate data loss risk with reduced fault tolerance
        - Potential topic unavailability if min.insync.replicas > available replicas
        - Degraded cluster performance during rebalancing and leadership elections
        - Loss of exactly-once delivery guarantees for affected partitions
        - Increased latency for producers and consumers during recovery
        - Risk of cascading failures if additional brokers become unavailable
      impactScore: 10
      tags:
        - kafka
        - replication
        - data-loss
        - high-availability
        - broker-failure
        - cluster-degradation
      mitigation: |
        IMMEDIATE ACTIONS:
        - Check status of all brokers: `kafka-broker-api-versions --bootstrap-server <broker>`
        - Identify failed broker and investigate root cause (logs, system resources)
        - Monitor under-replicated partitions: `kafka-topics --bootstrap-server <broker> --under-replicated-partitions`
        - Verify cluster health: `kafka-log-dirs --bootstrap-server <broker> --describe`

        RECOVERY STEPS:
        1. Restore failed broker if possible (restart service, fix resource issues)
        2. If broker cannot be restored, replace with new broker using same broker.id
        3. Monitor partition reassignment and ISR recovery
        4. Consider manual partition reassignment if automatic recovery is slow

        PREVENTION:
        - Implement comprehensive monitoring for UnderReplicatedPartitions metric
        - Set up alerting for broker availability and resource utilization
        - Consider increasing replication factor for critical topics
        - Implement proper capacity planning and resource allocation
      mitigationScore: 6
      references:
        - https://kafka.apache.org/documentation/#design_replicatedlog
        - https://docs.confluent.io/platform/current/kafka/monitoring.html#replica-management
        - https://kafka.apache.org/documentation/#basic_ops_cluster_expansion
        - https://cwiki.apache.org/confluence/display/KAFKA/KIP-91%3A+Provide+Broker+Metadata+in+LeaderAndIsrRequest
      applications:
        - name: "kafka"
          version: ">=2.0.0"
        - name: "confluent-kafka"
          version: ">=5.0.0"
    metadata:
      kind: prequel
      id: ZyucKrtMqvRzF3BQKw5GWq
    rule:
      sequence:
        window: 120s
        event:
          source: cre.log.kafka
        order:
          - regex: "Partition .* marked as failed|ReplicaFetcher.*Shutting down"
          - regex: "ISR \\[1,3\\].*removing replicas"
          - regex: "ISR \\[1,3\\].*removing replicas"
